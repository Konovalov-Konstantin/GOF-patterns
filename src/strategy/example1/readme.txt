
                                            Паттерн СТРАТЕГИЯ.

Для реализации разных вариантов поведения используется паттерн Стратегия. Поведение инкапсулируетсяв отдельном наборе
классов, который легко расширяется и изменяется — при необходимости даже во время выполнения.

Общее одинаковое поведение (swim) для всех подклассов родительского класса Duck остается в родительском классе Duck.

Для поведения, которое может меняться в подклассах класса Duck, создаются интерфейсы (FlyBehavior, QuackBehavior),
в классе Duck создаются поля по типу созданных интерфейсов(flyBehavior, quackBehavior), и методы (performFly, performQuack),
создаются классы-реализации интерфейсов (FlyBehavior, QuackBehavior) с реализацией нужной логики fly и quack.

В конструкторах наследников класса Duck инициализируются поля (flyBehavior, quackBehavior) конкретными реализациями
интерфейсов (FlyBehavior, QuackBehavior) и реализация абстрактного метода display().

Для динамического изменения поведения в наследниках, в классе Duck созданы методы setFlyBehavior(FlyBehavior fb)
и setQuackBehavior(QuackBehavior qb).